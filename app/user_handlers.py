from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import asyncio

from app.utils.get_qa import get_data
from app.utils.city import city_check

import app.database.requests as rq
import app.keyboards as kb


router = Router()
data = get_data()

class City(StatesGroup):
    is_right = State()
    name = State()

class Admin(StatesGroup):
    username = State()

class Location(StatesGroup):
    name = State()
    name_ru = State()
    address = State()
    maps_url = State()


#  /start
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    user = await rq.set_user(message.from_user.id, message.from_user.username)
    
    await message.answer('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ @spherelife_bot! ü§ñ')
    if user.ask_subscribe == False:
        await asyncio.sleep(1)
        await message.answer('üòä –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª @spherelife üì≤', reply_markup=kb.subscribe)
        
    else:
        await message.answer('–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç—Å—è –≤—Å—é —Ü—ñ–∫–∞–≤—É –≤–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.', reply_markup=kb.main)
    

@router.callback_query(F.data == 'continue')
async def cmd_start_continue(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç—Å—è –≤—Å—é —Ü—ñ–∫–∞–≤—É –≤–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.', reply_markup=kb.main)

#  Menu
@router.message(Command('menu'))
async def cmd_menu(message: types.Message):
    await message.answer('–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=kb.main)

#  Services
@router.message(or_f(Command('services'), ('—Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä' == F.text.lower())))
async def get_services(message: types.Message):
    await message.answer('üìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä üìù', reply_markup=await kb.service_list())

@router.callback_query(F.data == 'back_to_service_list')
async def get_services(callback: types.CallbackQuery):
    await callback.message.edit_text('üìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä üìù', reply_markup=await kb.service_list())

@router.callback_query(F.data.startswith('service_'))
async def get_service(callback: types.CallbackQuery):
    service = await rq.get_service(int(callback.data.split('_')[1]))
    await callback.message.edit_text(f'<b>{service.title}</b>\n<blockquote><i>{service.short_desc}</i></blockquote>', reply_markup=await kb.service_info(service.id))

@router.callback_query(F.data.startswith('more_info_'))
async def get_more_info(callback: types.CallbackQuery):
    service = await rq.get_service(int(callback.data.split('_')[-1]))
    await callback.message.edit_text(f'<i><b>{service.title}</b></i>\n<blockquote><i>{service.short_desc}</i></blockquote>\n\nüìù –û–ø–∏—Å –ø–æ—Å–ª—É–≥–∏ üìù\n{service.long_desc}', reply_markup=await kb.back_to_service_info(service.id))

#  Locations
@router.message(or_f(Command('locations'), ('–Ω–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è' == F.text.lower())))
async def get_city(message: types.Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)

    if user.ask_city:
        locations = await rq.get_locations()
        str_locations = await city_check(locations)
        await message.answer(str_locations, reply_markup=kb.main)
    else:
        await state.set_state(City.name) # branchLocation
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞')

#  Locations / Get city
@router.message(City.name)
async def check_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    city_data = await state.get_data()
    locations = await rq.get_locations()
    
    if await rq.get_location(city_data['city'].lower()):
        str_locations = await city_check(locations)
        await message.answer(str_locations, reply_markup=kb.main)
    else:
        await rq.update_ask_city(message.from_user.id)
        await rq.set_city(city_data['city'].lower())
        
        str_locations = await city_check(locations, 'üòî –ù–∞ –∂–∞–ª—å, –Ω–∞—à–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ —â–µ –Ω–µ–º–∞—î —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ üåç\n–ú–∏ –≤—Ä–∞—Ö—É–≤–∞–ª–∏ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —ñ —è–∫ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–∫—Ä–∏—î–º–æ—Å—è —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ, –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞—Å üì©\n\n–û—Å—å –∞–¥—Ä–µ—Å–∏, –∑–∞ —è–∫–∏–º–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Å –∑–Ω–∞–π—Ç–∏ –≤ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ç–∞—Ö üìç\n\n')

        await message.answer(str_locations, reply_markup=kb.main)

    await state.clear()

#  Questions&Answers
@router.message(or_f(Command('questions'), ('–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è' == F.text.lower())))
async def questions(message: types.Message):    
    await message.answer('<b><i>üìö‚ùì –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üìö‚ùì</i></b>', reply_markup=await kb.question_list(data))

#  Callback questions&answers
@router.callback_query(F.data == 'back_to_questions')
async def questions(callback: types.CallbackQuery):    
    await callback.message.edit_text('<b><i>üìö‚ùì –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üìö‚ùì</i></b>', reply_markup=await kb.question_list(data))

@router.callback_query(F.data.startswith('qa_'))
async def get_answer(callback: types.CallbackQuery):
    await callback.message.edit_text(f'<b><i>{data[int(callback.data.split('_')[1])][0]}</i></b>\n\n{data[int(callback.data.split('_')[1])][1]}', reply_markup=kb.back_to_questions)

#  Media
@router.message(or_f(Command('our_media'), ('–Ω–∞—à—ñ –º–µ–¥—ñ–∞' == F.text.lower())))
async def our_media(message: types.Message):
    await message.answer('–°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –º–µ–¥—ñ–∞', reply_markup=await kb.media_list())
