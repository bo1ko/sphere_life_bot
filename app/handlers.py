from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.utils.get_qa import get_data
import app.database.requests as rq
import app.keyboards as kb


router = Router()
data = get_data()

class City(StatesGroup):
    name = State()


#  /start
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await rq.set_user(message.from_user.id, message.from_user.username)
    await message.answer('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ @spherelife_bot! ü§ñ\n–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç—Å—è –≤—Å—é —Ü—ñ–∫–∞–≤—É –≤–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.', reply_markup=kb.main)

#  Menu
@router.message(Command('menu'))
async def cmd_menu(message: types.Message):
    await message.answer('–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=kb.main)

@router.message(or_f(Command('locations'), ('–Ω–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è' == F.text.lower())))
async def get_city(message: types.Message, state: FSMContext):
    await state.set_state(City.name) # branchLocation
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞')

@router.message(City.name)
async def check_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    city_data = await state.get_data()
    await rq.set_city(city_data['city'].lower())
    
    await message.answer(f'Your city name {city_data['city']}')

#  Questions&Answers
@router.message(or_f(Command('questions'), ('–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è' == F.text.lower())))
async def questions(message: types.Message):    
    await message.answer('<b><i>üìö‚ùì –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üìö‚ùì</i></b>', reply_markup=await kb.question_list(data))

@router.callback_query(F.data.startswith('qa_'))
async def get_answer(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'<b><i>{data[int(callback.data.split('_')[1])][0]}</i></b>\n\n{data[int(callback.data.split('_')[1])][1]}')

#  Media
@router.message(or_f(Command('our_media'), ('–Ω–∞—à—ñ –º–µ–¥—ñ–∞' == F.text.lower())))
async def our_media(message: types.Message):
    await message.answer('–°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –º–µ–¥—ñ–∞', reply_markup=await kb.media_list())
